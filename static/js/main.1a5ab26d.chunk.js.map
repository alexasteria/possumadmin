{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Select","App","useState","arrItems","setArrItems","key","setKey","useEffect","fetch","then","res","json","sendMessage","text","message","info","changeAvailable","value","product","a","map","item","_id","newItem","available","newArr","addPrice","varPrice","length","push","count","price","delPrice","index","splice","saveProd","changeProduct","changeCount","changeCountLabel","countLabel","changePrice","changeIsTrading","isTrading","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","error","columns","title","dataIndex","render","thumb_photo","style","width","height","src","onChange","color","margin","placeholder","defaultValue","onClick","danger","display","justifyContent","type","className","event","target","dataSource","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1a5ab26d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {Table, Tag, Space, Button, InputNumber, Select, message, Input} from 'antd';\n\nconst {Option} = Select;\n\nconst App = () => {\n    const [arrItems, setArrItems] = useState([]);\n    const [key, setKey] = useState('');\n    useEffect(()=>{\n        fetch('https://sahpossum.herokuapp.com/items/getVkItems/all')\n            .then(res=>res.json())\n            .then(res=>{\n                setArrItems(res)\n            })\n    }, []);\n\n    const sendMessage = (text) => {\n        message.info(text);\n    };\n\n    const changeAvailable = async (value, product) => {\n        const newArr = await arrItems.map(item=>{\n            if (item._id === product._id){\n                const newItem = {...item};\n                newItem.available = value;\n                return newItem\n            }\n            return item\n        });\n        setArrItems(newArr)\n    };\n\n    const addPrice = async(product) => {\n        if (product.varPrice.length <3){\n            const newArr = await arrItems.map(item=>{\n                if (item._id === product._id){\n                    const newItem = {...item};\n                    newItem.varPrice.push({count: 0, price: 0});\n                    return newItem\n                }\n                return item\n            });\n            setArrItems(newArr)\n        } else {\n            sendMessage('Нельзя добавлять больше 3 пунктов')\n        }\n    };\n\n    const delPrice = async(product, index) => {\n        if (product.varPrice.length !== 1){\n            const newArr = await arrItems.map(item=>{\n                if (item._id === product._id){\n                    const newItem = {...item};\n                    newItem.varPrice.splice(index, 1);\n                    return newItem\n                }\n                return item\n            });\n            setArrItems(newArr)\n        } else {\n            sendMessage('Нельзя удалять последний элемент цены')\n        }\n    };\n\n    const saveProd = async(product) => {\n        product.key = key;\n        changeProduct(product)\n    };\n\n    const changeCount = async(value, product, index) => {\n        const newArr = await arrItems.map(item=>{\n            if (item._id === product._id){\n                const newItem = {...item};\n                newItem.varPrice[index].count = value;\n                return newItem\n            }\n            return item\n        });\n        setArrItems(newArr)\n    };\n\n    const changeCountLabel = async(value, product, index) => {\n        const newArr = await arrItems.map(item=>{\n            if (item._id === product._id){\n                const newItem = {...item};\n                newItem.varPrice[index].countLabel = value;\n                return newItem\n            }\n            return item\n        });\n        setArrItems(newArr)\n    };\n\n    const changePrice = async(value, product, index) => {\n        const newArr = await arrItems.map(item=>{\n            if (item._id === product._id){\n                const newItem = {...item};\n                newItem.varPrice[index].price = value;\n                return newItem\n            }\n            return item\n        });\n        setArrItems(newArr)\n    };\n\n    const changeIsTrading = async (product) => {\n        const newArr = await arrItems.map(item=>{\n            if (item._id === product._id){\n                const newItem = {...item};\n                newItem.isTrading = !product.isTrading;\n                newItem.key = key;\n                changeProduct(newItem)\n                return newItem\n            }\n            return item\n        });\n        setArrItems(newArr)\n        sendMessage('Готово.')\n    };\n\n    const changeProduct = (product) => {\n        product.key = key;\n        fetch('https://sahpossum.herokuapp.com/items/changeVkItem',{\n            method: 'PATCH', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *client\n            body: JSON.stringify(product) // body data type must match \"Content-Type\" header\n        })\n            .then(res=>res.json())\n            .then(res=>res.error ? sendMessage(res.error) : sendMessage('Изменения сохранены'))\n    };\n\n    const columns = [\n        {\n            title: 'Фото',\n            dataIndex: 'thumb_photo',\n            key: 'thumb_photo',\n            render: thumb_photo => <img style={{width: 100, height: 100}} src={thumb_photo}/>,\n        },\n        {\n            title: 'Название',\n            dataIndex: 'title',\n            key: 'title',\n            render: text => <a>{text}</a>,\n        },\n        {\n            title: 'Доступное количество',\n            dataIndex: 'available',\n            key: 'available',\n            render: (count, product) => <InputNumber value={count} onChange={(value)=>changeAvailable(value, product)}/>,\n        },\n        {\n            title: 'Зависимости',\n            dataIndex: 'varPrice',\n            key: 'varPrice',\n            render: (varPrice, product) => {\n                return (\n                    varPrice.map((item, index)=>{\n                        return (\n                            <div key={index}>\n                            <Tag color={'green'}>\n                                <div>\n                                    <InputNumber style={{margin: 5}} placeholder='Вес/Обьем' value={item.count} onChange={(value)=>changeCount(value, product, index)}/>\n                                    <Select value={item.countLabel || null} onChange={(value)=>changeCountLabel(value, product, index)}>\n                                        <Option value={'Вес'}>Вес</Option>\n                                        <Option value={'Цвет'}>Цвет</Option>\n                                        <Option value={'Объем'}>Объем</Option>\n                                        <Option value={'Размер'}>Размер</Option>\n                                    </Select>\n                                    <InputNumber style={{margin: 5}} placeholder='Цена' value={item.price} onChange={(value)=>changePrice(value, product, index)}/>\n                                    <Select defaultValue={'руб.'}>\n                                        <Option value={'руб.'}>руб.</Option>\n                                    </Select>\n                                    <Button onClick={()=> delPrice(product, index)} style={{margin: 5}} danger>Удалить</Button>\n                                </div>\n                                {\n                                    index === varPrice.length-1 &&\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                            <Button type=\"dashed\" onClick={()=>addPrice(product)}>Добавить</Button>\n                                            <Button type=\"dashed\" onClick={()=>saveProd(product)}>Сохранить</Button>\n                                        </div>\n                                }\n                            </Tag>\n                            </div>\n                        )\n                    })\n                )\n            }\n        },\n        {\n            title: 'Статус продажи',\n            dataIndex: 'isTrading',\n            key: 'isTrading',\n            render: (isTrading, product) =>{\n                return (\n                    <Tag onClick={()=>changeIsTrading(product)} color={isTrading ? 'green' : 'red'} key={1}>\n                        {isTrading ? 'Продается' : 'Снят с продажи'}\n                    </Tag>\n                )\n            },\n        }\n    ];\n  return (\n    <div className=\"container\">\n        <Input value={key} onChange={event=>setKey(event.target.value)} placeholder={'Вставьте в это поле ключ доступа. Без него изменения не будут применены.'}/>\n      <Table columns={columns} dataSource={arrItems} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}